# Инструкция для работы с Git и удаленными репозиториями
 
## Что такое Git?
Git - это одна из реализаций распределенных систем контроля версий, имеющая как и локальные, так и удаленные репозитории. Является самой популярной реализацией систем контроля версий 
 
## Подготовка репозитория
Для создания репозитория необходимо выполнить команду "git init" в папке с репозиторием и у Вас создаться репозиторий (появится скрытая ппка .git)
 
### Git add
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*
 
## Создание коммитов
Для того, чтобы создать коммит (сохранение) необходимо выполнить команду "git commit". Выполняется она так: *git commit -m"<сообщение к коммиту>*. Все файлы для коммита должны быть ***добавлены*** и сообщение к коммиту писать ***обязательно***.
 
 
## Перемещение между сохранениями
Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она впапке с репозиторием следующим образом: *git checkout <номер коммита>*
 
### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.
 
## Журнал изменений
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием
 
## Ветки в Git
 
### Создание ветки
 
Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: *git branch <название новой ветки>*
 
## Слияние веток
 
Для того чтобы дабавить ветку в текущую ветку используется команда *git merge <name branch>*
 
## Удаление веток
Для удаления ветки ввести команду "git branch -d 'name branch'"
 
## Просмотр списка веток
Можно просматривать полный список веток, используя параметр *git branch*. Команда отобразит все ветки, отметит текущую звёздочкой (*) и выделит её цветом.
 
## GitHub
### GitHub — это популярный сайт, где можно хранить репозитории и работать с ними. Ещё это крупнейшая площадка, где разработчики размещают проекты с открытым исходным кодом.
 
## Как создать и оформить аккаунт на Гитхаб
Чтобы начать работу, нужно загрузить Git отсюда. Для начала будет достаточно версии Portable. После установки Git зарегистрируемся в GitHub. В конце у нас будет и программа Git, и GitHub-аккаунт, куда можно загружать свои репозитории.
 
### Чтобы установить GitHub, нужно сделать несколько шагов.
 
* Зайдите на github.com и нажмите Sign up.
Вбейте имя пользователя, email (такой же, как в Git) и пароль.
 
* Затем введите код активации, он придёт на почту. После ответьте на вопросы и уточните настройки или пропустите эти шаги кнопкой Skip personalization.
* Готово, у вас есть свой профиль GitHub, где вам сразу предложат создать свой первый репозиторий.
 
 Теперь, когда есть аккаунт в GitHub, нужно залогиниться в консоли Git, чтобы связать их. Для этого нужно выполнить команды в консоли, которые зададут имя пользователя и email.
 
Чтобы ввести ваше имя, нужно ввести команду
 
git config --global user.name “ваш логин в кавычках”
 
Чтобы ввести вашу почту, нужно ввести команду git config --global user.email вашапочта@example.com
 
Как быстро научиться работать с Гит и Гитхаб
GitHub сейчас самый распространённый сервис для работы над проектами в команде, хранения и демонстрации своих навыков. Уметь работать в нём — один из обязательных навыков для программиста. Научиться можно самому с помощью гайдов, шпаргалок и видеороликов в интернете.
 
Системно разобраться в принципах работы GitHub можно на курсах. Такие курсы бывают продвинутые или сжатые, для начинающих разработчиков или опытных программистов. После обучения на них вы узнаете, как управлять файлами, создавать и изменять репозитории, изучите основные команды Git и узнаете много полезного о коммитах, ветках и слияниях.
ий в мире.
